The Algorithm Design Manual Notes:

Part 1: Practical Algorithm Design

1. Introduction to Algorithm Design:
- algorithm must have general, well-specified problem.
- algorithm has set of instances it must work on, and a defined output
- want algorithm to be correct, efficient, and easy to impliment

1.1 Robot Tour Optimization
Problem: Robot Tour Optimization
Input: A set S of n points in the plane.
Output: What is the shortest cycle tour that visits each points in the set S?
Also known as the Traveling Salesman Problem (TSP)

1.2 Selecting the Right Jobs
Problem: Movie Scheduling Problem
Input: A set I of n intervals on the line
Output: What is the largest subset of mutually non-overlapping intervals which can be selected from I?
Remember: Full, complete algorithms that guarantee a correct soltion are not always best, as they may take too much time

1.3 Reasoning about Correctness
Proof. 
- Clear, precise statement about what you are trying to prove.
- Set of assumptions of thing which are taken to be true and are used as part of the proof.
- Chain of reasoning which go from assumptions to statement
- statement at bottom saying "thus it is demonstrated"

1.3.1 Expressing Algorithms
1. English, 2. Pseudocode 3. real programming language

1.3.2 Problems and Properties
Problem specifications have 1) the set of allowed input instances, and 2) the required properties of the algorithm's output.

1.3.3. Demonstrating Incorrectness
 - best way to prove than an algorithm is incorrect is to produce and instance in which it yields and incorrect answer (counter-example)
 Counter-examples:
 - verifiability: 
 	-> calculate what ansnwer your algorithm will give in this instance
 	-> display a better answer to prove that the algorithm did not find it
 - simplicity

 1.3.4 Induction and Recursion
 induction: Prove a formula for some basis case, then assumed it was true for a general n assumption
 Recursion: solve a larger case by breaking it into pieces and calling the supprogram itself to solve these pieces, so long as you have a few base cases to which you know the answer already

 Problem: Prove the correctness of the following recursive algorithm for incrementing natural naumbers: y = y + 1:

 1.3.5 Summations
 Concise expressions describing the addition of an arbitrarily large set of numbers, in particular the formula
 sum from i = 1 to n of f(i) = f(1) + f(2) + f (3) + ... + f(n)

 Airithmetic Progressions:
 - important takeaway: sum of squares is cubic, sum of cubes in quartic, etc, for some i^p, p >= 1
 -if p < 1, then it always converges to a constant

 Geometric Series:
 - index of the loop effects the exponent

 1.4.1 Combinatorial Objects
 Permutations: arrangements, or orderings, of items. {1, 2, 3,, 4} and {4, 3, 2, 1,} are two distinct permutations of the same set of four integers. Key words: arrangement, ordering, sequence.
 Integers: sleections from a set of items. For example, {1, 3, 4} and {2} are two distinct subsets of the first four integers. Key words:group, collection, selection.
 Trees: hierarchical relationships between items. Key words: hierarchy, dominance relationship, taxonomy.
 Graphs: relationships between arbitrary pairs of objects. Key words: network, circuit, web.
 Polygons: regions in geometric spaces. Key words: shapes, boundaries, regions.
 Points: locations in some geometric space. Key words:position, location, sites.
 Strings: Key words:tet, patterns, labels.

page 21..

3.1 Contiguous vs Linked Data Structures:
- Contiguously-allocated structures are composed of single slabs of memory, and consist of arrays, matrices, heaps, and hash tables
- Linked Data Structures are composed of distinct chunks of memory bound together by pointers, and include lists, trees, and graph adjacency lists.


