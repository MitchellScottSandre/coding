Map and Reduce:

map: translate list elements
reduce: combine all list elements into 1 value

//linear mapping.... gets one array and does things to it and returns the new array
void map (const void *a, size_t n, size_t elem, void *b, size_t elem_b, void (*f)(const void *a, void *b) ) {
	
}


//a is source list, b is pointer to reduction variable
void reduce(const void a*, size_t n, size_t elema, void *b, void (*f)(const void *a, void *b)){//iterate through a list and reduce the values down to one number (add them, multiply them, etc, etc)
	for (int i = 0; i < n, i++){
	f(a, b);
	a = (const char *)a + elem_a;
	}
}

map

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void main(const void *a, size_t n, size_t elem_a, 
void *b, size_t elem_b, 
void (*f)(const void *a, void *b)) {
for(int i = 0; i < n; i++) {
		f(a,b);
		a = (char *)a + elem_a;
		b = (char *)b + elem_b;
}
}

int main(){
	char *sentence[] = {"A", "day", "without", "sunshine", "is", "like", "night"};//what is the size of each of the array elements? 8-> each array element is actually just a pointer
	const int n = sizeof(sentence)/sizeof(sentence[0]);

	//find word lengths
	int lengths[n];
	map (sentence, n, sizeof(char *), lengths, sizeof(int), [] (const void *a, void *b){//remember that String are length abc\0 (4)
		*(int *) b = strlen(*(char**)a);
	}

	//find max length
	int max = -1;
		//							//memory location of max
	reduce(lengths, n, sizeof(int), &max, [](const void *a, void *b){
		if (*(int) *)a > *(int *)b)
			*(int *)b = *(int *)a;
	} );
	printf("%d\n", max);

}