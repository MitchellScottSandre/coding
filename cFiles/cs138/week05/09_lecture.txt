============================================================================================================================================
January 31, 2017.
Rule of 3:
	- first time you need to write some code, just do it
	- second time you need to do something almost the same, do it again, but somewhere else
	- after a third time, make an abstraction

Implement a Linked List that is Sorted

- for most of these operations
	- a key value is provided as a parameter (unlike pop, leave)
	- need to loop through the lements, starting at first pointer
	- remember that list is sorted by val
	- stopping criterion is ... (it depends)

- for lookup
	- start cur pointer to the first elements
	- loop through the list: cur = cur->next
	- loop exit condition:
		- find element we are looking for, current element is bigger than looking-for-element, reach end of list

Lazy (aka short-circuit) evaluation
	- what happens here if cur == nullptr?
	- while (nullptr != cur && cur->val)

	- lazy refers to if (A || B) if A is true, doesn't check B
	or, if (A && B) and A is false, doesn't need to check B

For Insert:
	- create a new node, set its val
	- start cur at first element
	- iterate through list until you find cur->val > val ?
	- adjust previous element to point to new Node

	- adjust new node to point to what previous element pointed to
	-note that first may need to change, but only if we insert new element at the beginning

	Lots of Possible Cases to Deal With!!
	- same elment exists already
	- empty list
	- single element list
	- Non Empty List
		a. insert before first element
		b. insert in middle
		c. insert after last element

For Remove:
	- first node, middle, last newNode
	- empty, single element list, element not there, multiple same element

============================================================================================================================================




============================================================================================================================================
